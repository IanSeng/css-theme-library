"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConfig = exports.getNpmExecPath = exports.endPrintVerbose = exports.printVerbose = exports.execFileAsync = exports.readJSONFile = exports.isPkgData = exports.relativePath = exports.isObject = void 0;
const command_join_1 = require("command-join");
const fs = require("fs");
const path = require("path");
const util_1 = require("util");
const crossSpawn = require("cross-spawn");
const readFileAsync = util_1.promisify(fs.readFile);
function isObject(value) {
    return typeof value === 'object' && value !== null;
}
exports.isObject = isObject;
function relativePath(pathStr) {
    const relativePathStr = path.relative(process.cwd(), pathStr);
    return path.isAbsolute(relativePathStr) || relativePathStr.startsWith('.')
        ? relativePathStr
        : `.${path.sep}${relativePathStr}`;
}
exports.relativePath = relativePath;
function isPkgData(value) {
    if (isObject(value)) {
        return typeof value.version === 'string';
    }
    return false;
}
exports.isPkgData = isPkgData;
async function readJSONFile(filepath) {
    try {
        const dataText = await readFileAsync(filepath, 'utf8');
        try {
            return JSON.parse(dataText);
        }
        catch (error) {
            throw new Error(`Invalid JSON: ${relativePath(filepath)}`);
        }
    }
    catch (error) {
        throw new Error(`Could not read file: ${relativePath(filepath)}`);
    }
}
exports.readJSONFile = readJSONFile;
/**
 * @see https://github.com/nodejs/node/blob/v12.13.0/lib/child_process.js#L250-L303
 */
function execExithandler({ command, args = [], stdoutList, stderrList, resolve, reject, }) {
    return (code, signal) => {
        const stdout = stdoutList.join('');
        const stderr = stderrList.join('');
        if (code === 0 && signal === null) {
            resolve({ stdout, stderr });
            return;
        }
        let cmd = command;
        if (args.length > 0) {
            cmd += ` ${command_join_1.commandJoin(args)}`;
        }
        const error = new Error(`Command failed: ${cmd}\n${stderr}`);
        reject(error);
    };
}
/**
 * @see https://github.com/nodejs/node/blob/v12.13.0/lib/child_process.js#L305-L315
 */
function execErrorhandler({ process, reject, }) {
    return (error) => {
        if (process.stdout) {
            process.stdout.destroy();
        }
        if (process.stderr) {
            process.stderr.destroy();
        }
        reject(error);
    };
}
/**
 * @see https://github.com/nodejs/node/blob/v12.13.0/lib/child_process.js#L178-L390
 */
async function execFileAsync(...args) {
    return new Promise((resolve, reject) => {
        const process = crossSpawn(...args);
        const stdoutList = [];
        const stderrList = [];
        if (process.stdout) {
            process.stdout.on('data', (data) => stdoutList.push(data));
        }
        if (process.stderr) {
            process.stderr.on('data', (data) => stderrList.push(data));
        }
        process.on('close', execExithandler({
            command: args[0],
            args: args[1] || [],
            stdoutList,
            stderrList,
            resolve,
            reject,
        }));
        process.on('error', execErrorhandler({ process, reject }));
    });
}
exports.execFileAsync = execFileAsync;
let isPrintedVerbose = false;
function printVerbose(message) {
    if (!isPrintedVerbose) {
        console.error(`\n${message}`);
        isPrintedVerbose = true;
    }
    else {
        console.error(message);
    }
}
exports.printVerbose = printVerbose;
function endPrintVerbose() {
    if (isPrintedVerbose) {
        console.error();
    }
}
exports.endPrintVerbose = endPrintVerbose;
/**
 * @see https://github.com/mysticatea/npm-run-all/blob/v4.1.5/lib/run-task.js#L157-L174
 */
function getNpmExecPath() {
    const npmPath = process.env.npm_execpath;
    const npmPathIsJs = typeof npmPath === 'string' && /^\.m?js$/.test(path.extname(npmPath));
    const execPath = npmPathIsJs ? process.execPath : npmPath || 'npm';
    const isYarn = path.basename(npmPath || 'npm').startsWith('yarn');
    return {
        execPath,
        spawnArgs: typeof npmPath === 'string' && npmPathIsJs ? [npmPath] : [],
        isYarn,
    };
}
exports.getNpmExecPath = getNpmExecPath;
async function getConfig(keyMap) {
    const { execPath, spawnArgs, isYarn } = getNpmExecPath();
    const { stdout } = await execFileAsync(execPath, [
        ...spawnArgs,
        'config',
        'get',
        (isYarn && keyMap.yarn) || keyMap.npm,
    ]);
    return stdout.replace(/\n$/, '');
}
exports.getConfig = getConfig;
//# sourceMappingURL=utils.js.map