"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.push = exports.setTag = exports.isHeadTag = exports.tagExists = void 0;
const command_join_1 = require("command-join");
const utils_1 = require("./utils");
async function tagExists(tagName) {
    try {
        const { stdout } = await utils_1.execFileAsync('git', ['tag', '-l', tagName]);
        return stdout.split(/[\r\n]+/).includes(tagName);
    }
    catch (error) {
        throw new Error(`tagExists() Error: ${error}`);
    }
}
exports.tagExists = tagExists;
async function isHeadTag(tagName) {
    try {
        const { stdout } = await utils_1.execFileAsync('git', [
            'tag',
            '-l',
            tagName,
            '--points-at',
            'HEAD',
        ]);
        return stdout.split(/[\r\n]+/).includes(tagName);
    }
    catch (error) {
        throw new Error(`isHeadTag() Error: ${error}`);
    }
}
exports.isHeadTag = isHeadTag;
function genTagCmdArgs(tagName, message, sign = false) {
    const command = 'git';
    const args = sign || typeof message === 'string'
        ? /**
           * @see https://github.com/npm/cli/blob/v6.13.0/lib/version.js#L304
           */
            ['tag', tagName, sign ? '-sm' : '-m', message || '']
        : ['tag', tagName];
    return {
        command,
        args,
        get commandText() {
            return `${command} ${command_join_1.commandJoin(args)}`;
        },
    };
}
async function setTag(tagName, { message, sign, debug = false, dryRun = false, } = {}) {
    const cmd = genTagCmdArgs(tagName, message, sign);
    if (typeof debug === 'function') {
        utils_1.printVerbose(debug(cmd.commandText));
    }
    else if (debug) {
        utils_1.printVerbose(`> ${cmd.commandText}`);
    }
    if (!dryRun) {
        try {
            await utils_1.execFileAsync(cmd.command, cmd.args);
        }
        catch (error) {
            throw new Error(`setTag() Error: ${error}`);
        }
    }
}
exports.setTag = setTag;
async function push(src, { repository = 'origin', debug = false, dryRun = false, } = {}) {
    try {
        const args = ['push', repository, src];
        if (debug) {
            utils_1.printVerbose(`> git ${command_join_1.commandJoin(args)}`);
        }
        if (!dryRun) {
            await utils_1.execFileAsync('git', args);
        }
    }
    catch (error) {
        throw new Error(`push() Error: ${error}`);
    }
}
exports.push = push;
//# sourceMappingURL=git.js.map